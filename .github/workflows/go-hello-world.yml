name: go-hello-world

on:
  push:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GITHUB_SHA: ${{ github.sha }}
  GITHUB_REF: ${{ github.ref }}
  PLATFORM_AMD64: linux/amd64
  PLATFORM_ARMV7: linux/arm/v7

jobs:
  build_images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Get Version
        run: |
          version=`cat /home/runner/work/go-hello-world/go-hello-world/version.json | jq '.Version' | sed 's/"//g'`
          echo "version=$version" >> $GITHUB_ENV
      - name: Build docker cli
        run: |
          github_ref=${GITHUB_REF##refs/heads/}
          github_ref=${GITHUB_REF##refs/tags/}
          docker build -f ./cmd/cli/Dockerfile . -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:amd64_${{ env.version }} --build-arg GIT_COMMIT=$GITHUB_SHA --build-arg GIT_BRANCH=$github_ref --build-arg PLATFORM=$PLATFORM_AMD64 --build-arg GO_ARCH=amd64
          docker build -f ./cmd/cli/Dockerfile . -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:armv7_${{ env.version }} --build-arg GIT_COMMIT=$GITHUB_SHA --build-arg GIT_BRANCH=$github_ref --build-arg PLATFORM=$PLATFORM_ARMV7 --build-arg GO_ARCH=arm --build-arg GO_ARM=7
      - name: Build docker rest
        run: |
          github_ref=${GITHUB_REF##refs/heads/}
          github_ref=${GITHUB_REF##refs/tags/}
          docker build -f ./cmd/rest/Dockerfile . -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rest:amd64_${{ env.version }} --build-arg GIT_COMMIT=$GITHUB_SHA --build-arg GIT_BRANCH=$github_ref --build-arg PLATFORM=$PLATFORM_AMD64 --build-arg GO_ARCH=amd64
          docker build -f ./cmd/rest/Dockerfile . -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rest:armv7_${{ env.version }} --build-arg GIT_COMMIT=$GITHUB_SHA --build-arg GIT_BRANCH=$github_ref --build-arg PLATFORM=$PLATFORM_ARMV7 --build-arg GO_ARCH=arm --build-arg GO_ARM=7
      - name: Generate build artifacts
        run: |
          mkdir -p /tmp
          docker save -o /tmp/go-hello-world-cli_amd64-${{ env.version }}.tar.gz ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:amd64_${{ env.version }}
          docker save -o /tmp/go-hello-world-cli_armv7-${{ env.version }}.tar.gz ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:armv7_${{ env.version }}
          docker save -o /tmp/go-hello-world-rest_amd64-${{ env.version }}.tar.gz ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rest:amd64_${{ env.version }}
          docker save -o /tmp/go-hello-world-rest_armv7-${{ env.version }}.tar.gz ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rest:armv7_${{ env.version }}
          echo ${{ env.version }} >> /tmp/version
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            /tmp/go-hello-world-cli_amd64-${{ env.version }}.tar.gz
            /tmp/go-hello-world-cli_armv7-${{ env.version }}.tar.gz
            /tmp/go-hello-world-rest_amd64-${{ env.version }}.tar.gz
            /tmp/go-hello-world-rest_armv7-${{ env.version }}.tar.gz
            /tmp/version
          retention-days: 1
      - name: Docker clean-up
        run: |
          docker image prune -f
          docker container prune -f

  push_images:
    if: github.event_name == 'release' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      packages: write
    needs: build_images
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts
          path: /tmp
      - name: Get Version
        run: |
          version=`cat /tmp/version`
          echo "version=$version" >> $GITHUB_ENV
      - name: Login to ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Load Docker Images
        run: |
          docker load -i /tmp/go-hello-world-cli_amd64-${{ env.version }}.tar.gz
          docker load -i /tmp/go-hello-world-cli_armv7-${{ env.version }}.tar.gz
          docker load -i /tmp/go-hello-world-rest_amd64-${{ env.version }}.tar.gz
          docker load -i /tmp/go-hello-world-rest_armv7-${{ env.version }}.tar.gz
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:amd64_${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:amd64_latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:armv7_${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:armv7_latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rest:amd64_${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rest:amd64_latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rest:armv7_${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rest:armv7_latest
      - name: Push Docker Images
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:amd64_${{ env.version }} 
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:amd64_latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:armv7_${{ env.version }} 
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:armv7_latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rest:amd64_${{ env.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rest:amd64_latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rest:armv7_${{ env.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rest:armv7_latest
      - name: Create/Push Docker manifest
        run: |
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:amd64_${{ env.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:armv7_${{ env.version }}
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:${{ env.version }} --purge
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rest:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rest:amd64_latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rest:armv7_latest
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rest:latest --purge
      - name: Docker clean-up
        run: |
          docker image prune -f
          docker container prune -f
